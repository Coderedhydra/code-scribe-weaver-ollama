import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Send, Bot, User, Zap } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

interface AIChatProps {
  onCodeGenerate: (code: string) => void;
}

export function AIChat({ onCodeGenerate }: AIChatProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      role: 'assistant',
      content: 'Hello! I\'m your AI coding assistant powered by Ollama. I can help you create websites, apps, and code snippets. What would you like to build today?',
      timestamp: new Date()
    }
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const handleSend = async () => {
    if (!input.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input.trim(),
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);

    try {
      // Simulate AI response - In real implementation, this would call Ollama API
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: `I understand you want to ${input.toLowerCase()}. Here's a code example:\n\n\`\`\`javascript\n// Example generated code\nfunction ${input.replace(/\s+/g, '')}() {\n  console.log('Generated by AI');\n  return 'Hello from ${input}';\n}\n\`\`\`\n\nWould you like me to add this to your editor?`,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, aiResponse]);
      
      // Extract code from response and offer to add to editor
      const codeMatch = aiResponse.content.match(/```javascript\n([\s\S]*?)\n```/);
      if (codeMatch) {
        setTimeout(() => {
          toast({
            description: "Code generated! Click 'Add to Editor' to insert it.",
            action: (
              <Button 
                size="sm" 
                onClick={() => onCodeGenerate(codeMatch[1])}
                className="bg-primary text-primary-foreground"
              >
                Add to Editor
              </Button>
            )
          });
        }, 500);
      }
    } catch (error) {
      toast({
        variant: 'destructive',
        description: 'Failed to get AI response. Please check your Ollama connection.'
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="flex flex-col h-full bg-card border-border">
      <div className="flex items-center gap-2 p-3 border-b border-border bg-secondary">
        <Bot className="w-5 h-5 text-primary" />
        <span className="font-medium text-foreground">AI Assistant</span>
        <Zap className="w-4 h-4 text-terminal-green ml-auto" />
      </div>

      <ScrollArea className="flex-1 p-4">
        <div className="space-y-4">
          {messages.map((message) => (
            <div key={message.id} className="flex gap-3">
              <div className="w-8 h-8 rounded-full bg-secondary flex items-center justify-center flex-shrink-0">
                {message.role === 'user' ? (
                  <User className="w-4 h-4 text-accent" />
                ) : (
                  <Bot className="w-4 h-4 text-primary" />
                )}
              </div>
              <div className="flex-1 space-y-1">
                <div className="text-sm text-muted-foreground">
                  {message.role === 'user' ? 'You' : 'AI Assistant'}
                </div>
                <div className="text-sm text-foreground whitespace-pre-wrap font-mono">
                  {message.content}
                </div>
              </div>
            </div>
          ))}
          {isLoading && (
            <div className="flex gap-3">
              <div className="w-8 h-8 rounded-full bg-secondary flex items-center justify-center">
                <Bot className="w-4 h-4 text-primary animate-pulse" />
              </div>
              <div className="flex-1">
                <div className="text-sm text-muted-foreground">AI Assistant</div>
                <div className="text-sm text-foreground">Thinking...</div>
              </div>
            </div>
          )}
        </div>
      </ScrollArea>

      <div className="p-3 border-t border-border bg-secondary">
        <div className="flex gap-2">
          <Input
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSend()}
            placeholder="Ask AI to generate code..."
            disabled={isLoading}
            className="flex-1 bg-background border-border"
          />
          <Button 
            onClick={handleSend} 
            disabled={!input.trim() || isLoading}
            size="sm"
            className="bg-primary text-primary-foreground"
          >
            <Send className="w-4 h-4" />
          </Button>
        </div>
      </div>
    </Card>
  );
}